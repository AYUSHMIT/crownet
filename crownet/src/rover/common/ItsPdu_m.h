//
// Generated file, do not edit! Created by nedtool 5.6 from rover/common/ItsPdu.msg.
//

#ifndef __ROVER_ITSPDU_M_H
#define __ROVER_ITSPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#  if defined(ROVER_EXPORT)
#    define ROVER_API  OPP_DLLEXPORT
#  elif defined(ROVER_IMPORT)
#    define ROVER_API  OPP_DLLIMPORT
#  else
#    define ROVER_API
#  endif
#endif


namespace rover {

class ItsBase;
class ReferencePosition;
class ItsContainer;
class ItsBasicContainer;
class ItsBasicVehicleLfContainer;
class ItsVamBasicContainer;
class ItsHfContainer;
class ItsBasicVehicleHfContainer;
class ItsVamHfContainer;
class ItsLfContainer;
class ItsSpecialVehicleContainer;
class ItsVamClusterContainer;
class ItsPublicTransportContainer;
class ItsSpecialTransportContainer;
class ItsDangerousGoodsContainer;
class ItsRoadWorksContainerBasic;
class ItsRescueContainer;
class ItsEmergencyContainer;
class ItsSafetyCarContainer;
class ItsPduHeader;
class ItsCam;
class ItsVam;
} // namespace rover

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "rover/common/util/rover_util_m.h" // import rover.common.util.rover_util

// cplusplus {{
#include "rover/common/util/rover_util.h"
// }}


namespace rover {

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:29</tt> by nedtool.
 * <pre>
 * // StationType ETSI TS 102 894-2 V1.2.1 (2014-09)
 * enum ItsStationType
 * {
 *     UNKNOWN = 0;
 *     PEDSTRIAN = 1;
 *     CYCLIST = 2;
 *     MOPED = 3;
 *     MOTORCYCLE = 4;
 *     PASSENGER_CAR = 5;
 *     BUS = 6;
 *     LIGHT_TRUCK = 7;
 *     HEAVY_TRUCK = 8;
 *     TRAILER = 9;
 *     SPECIAL_VEHICLES = 10;
 *     TRAM = 11;
 *     ROAD_SIDE_UNIT = 15;
 * }
 * </pre>
 */
enum ItsStationType {
    UNKNOWN = 0,
    PEDSTRIAN = 1,
    CYCLIST = 2,
    MOPED = 3,
    MOTORCYCLE = 4,
    PASSENGER_CAR = 5,
    BUS = 6,
    LIGHT_TRUCK = 7,
    HEAVY_TRUCK = 8,
    TRAILER = 9,
    SPECIAL_VEHICLES = 10,
    TRAM = 11,
    ROAD_SIDE_UNIT = 15
};

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:46</tt> by nedtool.
 * <pre>
 * // DataType_94 VehicleRole ETSI TS 102 894-2 V1.2.1 (2014-09)
 * enum ItsVehicleRole
 * {
 *     DEFAULT = 0; //default vehicle role as indicated by the vehicle type
 *     PUBLIC_TRANSPORT = 1;
 *     SPECIAL_TRANSPORT = 2;
 *     DANGEROUS_GOODS = 3;
 *     ROAD_WORK = 4;
 *     RESCUE = 5;
 *     EMERGENCY = 6;
 *     SAFTEY_CAR = 7;
 *     AGRICULTURE = 8;
 *     COMMERCIAL = 9;
 *     MILITARY = 10;
 *     ROEAD_OPERATOR = 11;
 *     TAXI = 12;
 *     RESERVERD1 = 13;
 *     RESERVERD2 = 14;
 *     RESERVERD3 = 15;
 * }
 * </pre>
 */
enum ItsVehicleRole {
    DEFAULT = 0,
    PUBLIC_TRANSPORT = 1,
    SPECIAL_TRANSPORT = 2,
    DANGEROUS_GOODS = 3,
    ROAD_WORK = 4,
    RESCUE = 5,
    EMERGENCY = 6,
    SAFTEY_CAR = 7,
    AGRICULTURE = 8,
    COMMERCIAL = 9,
    MILITARY = 10,
    ROEAD_OPERATOR = 11,
    TAXI = 12,
    RESERVERD1 = 13,
    RESERVERD2 = 14,
    RESERVERD3 = 15
};

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:66</tt> by nedtool.
 * <pre>
 * // VRU_Profile ETSI TS 103 300-2 V2.1.1 (2020-05)
 * enum ItsVruProfile
 * {
 *     PEDESTRIAN = 1;
 *     BICYCLIST = 2;
 *     MOTORCYCLIST = 3;
 *     ANIMALS = 4;
 * }
 * </pre>
 */
enum ItsVruProfile {
    PEDESTRIAN = 1,
    BICYCLIST = 2,
    MOTORCYCLIST = 3,
    ANIMALS = 4
};

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:73</tt> by nedtool.
 * <pre>
 * enum ItsVruType
 * {
 *     ADULT = 1;
 *     CHILD = 2;
 *     INFANT = 3;
 *     ANIMAL = 4;
 * }
 * </pre>
 */
enum ItsVruType {
    ADULT = 1,
    CHILD = 2,
    INFANT = 3,
    ANIMAL = 4
};

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:80</tt> by nedtool.
 * <pre>
 * enum ItsVruDeviceType
 * {
 *     VRU_TX = 1; // ETSI TS 103 300-2 V2.1.1 (2020-05)
 *     VRU_RX = 2; // ETSI TS 103 300-2 V2.1.1 (2020-05)
 *     VRU_ST = 3; // ETSI TS 103 300-2 V2.1.1 (2020-05)   
 * }
 * </pre>
 */
enum ItsVruDeviceType {
    VRU_TX = 1,
    VRU_RX = 2,
    VRU_ST = 3
};

/**
 * Enum generated from <tt>rover/common/ItsPdu.msg:86</tt> by nedtool.
 * <pre>
 * enum ItsMessageId
 * {
 *     DENM = 1; //Decentralized Environmental Notification Message
 *     CAM = 2;  //Cooperative Awareness Message
 *     POI = 3;  //Point of Interest message as specified
 *     SPAT = 4; //Signal Phase And Timing
 *     MAP = 5; // Map Data message
 *     IVI = 6;  //  In Vehicle Information
 *     EV_RSR = 7; // Electric vehicle recharging spot reservation message
 *     CPM = 8; // Cooperative Perception Message
 *     MCM = 9; // Manoeuvre Coordination Message
 *     VAM = 10; // VRU Awareness Message	   
 * }
 * </pre>
 */
enum ItsMessageId {
    DENM = 1,
    CAM = 2,
    POI = 3,
    SPAT = 4,
    MAP = 5,
    IVI = 6,
    EV_RSR = 7,
    CPM = 8,
    MCM = 9,
    VAM = 10
};

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:99</tt> by nedtool.
 * <pre>
 * class ItsBase extends cObject
 * {
 * }
 * </pre>
 */
class ROVER_API ItsBase : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const ItsBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsBase&);

  public:
    ItsBase();
    ItsBase(const ItsBase& other);
    virtual ~ItsBase();
    ItsBase& operator=(const ItsBase& other);
    virtual ItsBase *dup() const override {return new ItsBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:104</tt> by nedtool.
 * <pre>
 * // DataType_124 (using cartesian coordinates here but standard uses lat/lon/alt)
 * class ReferencePosition extends ItsBase
 * {
 *     inet::Coord referencePosition;
 *     double semiMajorConf; // part of DataType_119 PosConfidenceEllipse
 *     double semiMinorConf; // part of DataType_119 PosConfidenceEllipse
 *     inet::Coord headingValue; // part of DataType_119 PosConfidenceEllipse
 * }
 * </pre>
 */
class ROVER_API ReferencePosition : public ::rover::ItsBase
{
  protected:
    inet::Coord referencePosition;
    double semiMajorConf = 0;
    double semiMinorConf = 0;
    inet::Coord headingValue;

  private:
    void copy(const ReferencePosition& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReferencePosition&);

  public:
    ReferencePosition();
    ReferencePosition(const ReferencePosition& other);
    virtual ~ReferencePosition();
    ReferencePosition& operator=(const ReferencePosition& other);
    virtual ReferencePosition *dup() const override {return new ReferencePosition(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::Coord& getReferencePosition() const;
    virtual inet::Coord& getReferencePositionForUpdate() { return const_cast<inet::Coord&>(const_cast<ReferencePosition*>(this)->getReferencePosition());}
    virtual void setReferencePosition(const inet::Coord& referencePosition);
    virtual double getSemiMajorConf() const;
    virtual void setSemiMajorConf(double semiMajorConf);
    virtual double getSemiMinorConf() const;
    virtual void setSemiMinorConf(double semiMinorConf);
    virtual const inet::Coord& getHeadingValue() const;
    virtual inet::Coord& getHeadingValueForUpdate() { return const_cast<inet::Coord&>(const_cast<ReferencePosition*>(this)->getHeadingValue());}
    virtual void setHeadingValue(const inet::Coord& headingValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReferencePosition& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReferencePosition& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:113</tt> by nedtool.
 * <pre>
 * class ItsContainer extends ItsBase
 * {
 * }
 * </pre>
 */
class ROVER_API ItsContainer : public ::rover::ItsBase
{
  protected:

  private:
    void copy(const ItsContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsContainer&);

  public:
    ItsContainer();
    ItsContainer(const ItsContainer& other);
    virtual ~ItsContainer();
    ItsContainer& operator=(const ItsContainer& other);
    virtual ItsContainer *dup() const override {return new ItsContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:118</tt> by nedtool.
 * <pre>
 * // The basic container includes basic information related to the originating ITS-S
 * class ItsBasicContainer extends ItsContainer
 * {
 *     ItsStationType stationType;
 *     ReferencePosition referencePosition;
 *     ItsVehicleRole role;
 *     PathPoint pathHistory[40];
 * }
 * </pre>
 */
class ROVER_API ItsBasicContainer : public ::rover::ItsContainer
{
  protected:
    rover::ItsStationType stationType = static_cast<rover::ItsStationType>(-1);
    ReferencePosition referencePosition;
    rover::ItsVehicleRole role = static_cast<rover::ItsVehicleRole>(-1);
    PathPoint pathHistory[40];

  private:
    void copy(const ItsBasicContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsBasicContainer&);

  public:
    ItsBasicContainer();
    ItsBasicContainer(const ItsBasicContainer& other);
    virtual ~ItsBasicContainer();
    ItsBasicContainer& operator=(const ItsBasicContainer& other);
    virtual ItsBasicContainer *dup() const override {return new ItsBasicContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual rover::ItsStationType getStationType() const;
    virtual void setStationType(rover::ItsStationType stationType);
    virtual const ReferencePosition& getReferencePosition() const;
    virtual ReferencePosition& getReferencePositionForUpdate() { return const_cast<ReferencePosition&>(const_cast<ItsBasicContainer*>(this)->getReferencePosition());}
    virtual void setReferencePosition(const ReferencePosition& referencePosition);
    virtual rover::ItsVehicleRole getRole() const;
    virtual void setRole(rover::ItsVehicleRole role);
    virtual size_t getPathHistoryArraySize() const;
    virtual const PathPoint& getPathHistory(size_t k) const;
    virtual PathPoint& getPathHistoryForUpdate(size_t k) { return const_cast<PathPoint&>(const_cast<ItsBasicContainer*>(this)->getPathHistory(k));}
    virtual void setPathHistory(size_t k, const PathPoint& pathHistory);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsBasicContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsBasicContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:125</tt> by nedtool.
 * <pre>
 * class ItsBasicVehicleLfContainer extends ItsBasicContainer
 * {
 *     short exterioLights; // 0-7 bitmask
 *     PathPoint pathHistory[40];
 * }
 * </pre>
 */
class ROVER_API ItsBasicVehicleLfContainer : public ::rover::ItsBasicContainer
{
  protected:
    short exterioLights = 0;
    PathPoint pathHistory[40];

  private:
    void copy(const ItsBasicVehicleLfContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsBasicVehicleLfContainer&);

  public:
    ItsBasicVehicleLfContainer();
    ItsBasicVehicleLfContainer(const ItsBasicVehicleLfContainer& other);
    virtual ~ItsBasicVehicleLfContainer();
    ItsBasicVehicleLfContainer& operator=(const ItsBasicVehicleLfContainer& other);
    virtual ItsBasicVehicleLfContainer *dup() const override {return new ItsBasicVehicleLfContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual short getExterioLights() const;
    virtual void setExterioLights(short exterioLights);
    virtual size_t getPathHistoryArraySize() const;
    virtual const PathPoint& getPathHistory(size_t k) const;
    virtual PathPoint& getPathHistoryForUpdate(size_t k) { return const_cast<PathPoint&>(const_cast<ItsBasicVehicleLfContainer*>(this)->getPathHistory(k));}
    virtual void setPathHistory(size_t k, const PathPoint& pathHistory);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsBasicVehicleLfContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsBasicVehicleLfContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:131</tt> by nedtool.
 * <pre>
 * class ItsVamBasicContainer extends ItsBasicContainer
 * {
 *     ItsVruProfile vruProfile;
 *     ItsVruType vruType;
 *     ItsVruDeviceType vruDeviceType;
 * }
 * </pre>
 */
class ROVER_API ItsVamBasicContainer : public ::rover::ItsBasicContainer
{
  protected:
    rover::ItsVruProfile vruProfile = static_cast<rover::ItsVruProfile>(-1);
    rover::ItsVruType vruType = static_cast<rover::ItsVruType>(-1);
    rover::ItsVruDeviceType vruDeviceType = static_cast<rover::ItsVruDeviceType>(-1);

  private:
    void copy(const ItsVamBasicContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsVamBasicContainer&);

  public:
    ItsVamBasicContainer();
    ItsVamBasicContainer(const ItsVamBasicContainer& other);
    virtual ~ItsVamBasicContainer();
    ItsVamBasicContainer& operator=(const ItsVamBasicContainer& other);
    virtual ItsVamBasicContainer *dup() const override {return new ItsVamBasicContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual rover::ItsVruProfile getVruProfile() const;
    virtual void setVruProfile(rover::ItsVruProfile vruProfile);
    virtual rover::ItsVruType getVruType() const;
    virtual void setVruType(rover::ItsVruType vruType);
    virtual rover::ItsVruDeviceType getVruDeviceType() const;
    virtual void setVruDeviceType(rover::ItsVruDeviceType vruDeviceType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsVamBasicContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsVamBasicContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:139</tt> by nedtool.
 * <pre>
 * // The high frequency container contains highly dynamic information of the originating ITS-S
 * class ItsHfContainer extends ItsContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsHfContainer : public ::rover::ItsContainer
{
  protected:

  private:
    void copy(const ItsHfContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsHfContainer&);

  public:
    ItsHfContainer();
    ItsHfContainer(const ItsHfContainer& other);
    virtual ~ItsHfContainer();
    ItsHfContainer& operator=(const ItsHfContainer& other);
    virtual ItsHfContainer *dup() const override {return new ItsHfContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsHfContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsHfContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:143</tt> by nedtool.
 * <pre>
 * class ItsBasicVehicleHfContainer extends ItsHfContainer
 * {
 *     inet::Coord heading; //normalized
 *     double speed; // in m/s
 *     //driveDirection DriveDirection,
 *     double vehicleLength; // in m
 *     double vehicleWidth; // in m
 *   //longitudinalAcceleration LongitudinalAcceleration,
 *   //curvature Curvature,
 *   //curvatureCalculationMode CurvatureCalculationMode,
 *   //yawRate YawRate,
 *   //accelerationControl AccelerationControl OPTIONAL,
 *   //lanePosition LanePosition OPTIONAL,
 *   //steeringWheelAngle SteeringWheelAngle OPTIONAL,
 *   //lateralAcceleration LateralAcceleration OPTIONAL,
 *   //verticalAcceleration VerticalAcceleration OPTIONAL,
 *   //performanceClass PerformanceClass OPTIONAL,
 *   //cenDsrcTollingZone CenDsrcTollingZone OPTIONAL
 * }
 * </pre>
 */
class ROVER_API ItsBasicVehicleHfContainer : public ::rover::ItsHfContainer
{
  protected:
    inet::Coord heading;
    double speed = 0;
    double vehicleLength = 0;
    double vehicleWidth = 0;

  private:
    void copy(const ItsBasicVehicleHfContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsBasicVehicleHfContainer&);

  public:
    ItsBasicVehicleHfContainer();
    ItsBasicVehicleHfContainer(const ItsBasicVehicleHfContainer& other);
    virtual ~ItsBasicVehicleHfContainer();
    ItsBasicVehicleHfContainer& operator=(const ItsBasicVehicleHfContainer& other);
    virtual ItsBasicVehicleHfContainer *dup() const override {return new ItsBasicVehicleHfContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::Coord& getHeading() const;
    virtual inet::Coord& getHeadingForUpdate() { return const_cast<inet::Coord&>(const_cast<ItsBasicVehicleHfContainer*>(this)->getHeading());}
    virtual void setHeading(const inet::Coord& heading);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getVehicleLength() const;
    virtual void setVehicleLength(double vehicleLength);
    virtual double getVehicleWidth() const;
    virtual void setVehicleWidth(double vehicleWidth);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsBasicVehicleHfContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsBasicVehicleHfContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:162</tt> by nedtool.
 * <pre>
 * class ItsVamHfContainer extends ItsHfContainer
 * {
 *     double speed;
 *     inet::Coord direction;   // heading, normalized
 *     inet::Coord orientation;
 *     PathPoint predictedTrajectory[10];
 *     PathPoint predictedVelocity[10];
 * }
 * </pre>
 */
class ROVER_API ItsVamHfContainer : public ::rover::ItsHfContainer
{
  protected:
    double speed = 0;
    inet::Coord direction;
    inet::Coord orientation;
    PathPoint predictedTrajectory[10];
    PathPoint predictedVelocity[10];

  private:
    void copy(const ItsVamHfContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsVamHfContainer&);

  public:
    ItsVamHfContainer();
    ItsVamHfContainer(const ItsVamHfContainer& other);
    virtual ~ItsVamHfContainer();
    ItsVamHfContainer& operator=(const ItsVamHfContainer& other);
    virtual ItsVamHfContainer *dup() const override {return new ItsVamHfContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual const inet::Coord& getDirection() const;
    virtual inet::Coord& getDirectionForUpdate() { return const_cast<inet::Coord&>(const_cast<ItsVamHfContainer*>(this)->getDirection());}
    virtual void setDirection(const inet::Coord& direction);
    virtual const inet::Coord& getOrientation() const;
    virtual inet::Coord& getOrientationForUpdate() { return const_cast<inet::Coord&>(const_cast<ItsVamHfContainer*>(this)->getOrientation());}
    virtual void setOrientation(const inet::Coord& orientation);
    virtual size_t getPredictedTrajectoryArraySize() const;
    virtual const PathPoint& getPredictedTrajectory(size_t k) const;
    virtual PathPoint& getPredictedTrajectoryForUpdate(size_t k) { return const_cast<PathPoint&>(const_cast<ItsVamHfContainer*>(this)->getPredictedTrajectory(k));}
    virtual void setPredictedTrajectory(size_t k, const PathPoint& predictedTrajectory);
    virtual size_t getPredictedVelocityArraySize() const;
    virtual const PathPoint& getPredictedVelocity(size_t k) const;
    virtual PathPoint& getPredictedVelocityForUpdate(size_t k) { return const_cast<PathPoint&>(const_cast<ItsVamHfContainer*>(this)->getPredictedVelocity(k));}
    virtual void setPredictedVelocity(size_t k, const PathPoint& predictedVelocity);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsVamHfContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsVamHfContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:172</tt> by nedtool.
 * <pre>
 * //The low frequency container contains static and not highly dynamic information of the originating ITS-S.
 * class ItsLfContainer extends ItsContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsLfContainer : public ::rover::ItsContainer
{
  protected:

  private:
    void copy(const ItsLfContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsLfContainer&);

  public:
    ItsLfContainer();
    ItsLfContainer(const ItsLfContainer& other);
    virtual ~ItsLfContainer();
    ItsLfContainer& operator=(const ItsLfContainer& other);
    virtual ItsLfContainer *dup() const override {return new ItsLfContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsLfContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsLfContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:177</tt> by nedtool.
 * <pre>
 * class ItsSpecialVehicleContainer extends ItsContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsSpecialVehicleContainer : public ::rover::ItsContainer
{
  protected:

  private:
    void copy(const ItsSpecialVehicleContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsSpecialVehicleContainer&);

  public:
    ItsSpecialVehicleContainer();
    ItsSpecialVehicleContainer(const ItsSpecialVehicleContainer& other);
    virtual ~ItsSpecialVehicleContainer();
    ItsSpecialVehicleContainer& operator=(const ItsSpecialVehicleContainer& other);
    virtual ItsSpecialVehicleContainer *dup() const override {return new ItsSpecialVehicleContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsSpecialVehicleContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsSpecialVehicleContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:181</tt> by nedtool.
 * <pre>
 * class ItsVamClusterContainer extends ItsSpecialVehicleContainer
 * {
 *     int clusterIdentifier;
 *     inet::Coord clusterPosition;
 *     inet::Coord clusterDimension;
 *     int clusterSize;
 * }
 * </pre>
 */
class ROVER_API ItsVamClusterContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:
    int clusterIdentifier = 0;
    inet::Coord clusterPosition;
    inet::Coord clusterDimension;
    int clusterSize = 0;

  private:
    void copy(const ItsVamClusterContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsVamClusterContainer&);

  public:
    ItsVamClusterContainer();
    ItsVamClusterContainer(const ItsVamClusterContainer& other);
    virtual ~ItsVamClusterContainer();
    ItsVamClusterContainer& operator=(const ItsVamClusterContainer& other);
    virtual ItsVamClusterContainer *dup() const override {return new ItsVamClusterContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getClusterIdentifier() const;
    virtual void setClusterIdentifier(int clusterIdentifier);
    virtual const inet::Coord& getClusterPosition() const;
    virtual inet::Coord& getClusterPositionForUpdate() { return const_cast<inet::Coord&>(const_cast<ItsVamClusterContainer*>(this)->getClusterPosition());}
    virtual void setClusterPosition(const inet::Coord& clusterPosition);
    virtual const inet::Coord& getClusterDimension() const;
    virtual inet::Coord& getClusterDimensionForUpdate() { return const_cast<inet::Coord&>(const_cast<ItsVamClusterContainer*>(this)->getClusterDimension());}
    virtual void setClusterDimension(const inet::Coord& clusterDimension);
    virtual int getClusterSize() const;
    virtual void setClusterSize(int clusterSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsVamClusterContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsVamClusterContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:189</tt> by nedtool.
 * <pre>
 * class ItsPublicTransportContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsPublicTransportContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsPublicTransportContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsPublicTransportContainer&);

  public:
    ItsPublicTransportContainer();
    ItsPublicTransportContainer(const ItsPublicTransportContainer& other);
    virtual ~ItsPublicTransportContainer();
    ItsPublicTransportContainer& operator=(const ItsPublicTransportContainer& other);
    virtual ItsPublicTransportContainer *dup() const override {return new ItsPublicTransportContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsPublicTransportContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsPublicTransportContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:194</tt> by nedtool.
 * <pre>
 * class ItsSpecialTransportContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsSpecialTransportContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsSpecialTransportContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsSpecialTransportContainer&);

  public:
    ItsSpecialTransportContainer();
    ItsSpecialTransportContainer(const ItsSpecialTransportContainer& other);
    virtual ~ItsSpecialTransportContainer();
    ItsSpecialTransportContainer& operator=(const ItsSpecialTransportContainer& other);
    virtual ItsSpecialTransportContainer *dup() const override {return new ItsSpecialTransportContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsSpecialTransportContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsSpecialTransportContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:199</tt> by nedtool.
 * <pre>
 * class ItsDangerousGoodsContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsDangerousGoodsContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsDangerousGoodsContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsDangerousGoodsContainer&);

  public:
    ItsDangerousGoodsContainer();
    ItsDangerousGoodsContainer(const ItsDangerousGoodsContainer& other);
    virtual ~ItsDangerousGoodsContainer();
    ItsDangerousGoodsContainer& operator=(const ItsDangerousGoodsContainer& other);
    virtual ItsDangerousGoodsContainer *dup() const override {return new ItsDangerousGoodsContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsDangerousGoodsContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsDangerousGoodsContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:204</tt> by nedtool.
 * <pre>
 * class ItsRoadWorksContainerBasic extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsRoadWorksContainerBasic : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsRoadWorksContainerBasic& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsRoadWorksContainerBasic&);

  public:
    ItsRoadWorksContainerBasic();
    ItsRoadWorksContainerBasic(const ItsRoadWorksContainerBasic& other);
    virtual ~ItsRoadWorksContainerBasic();
    ItsRoadWorksContainerBasic& operator=(const ItsRoadWorksContainerBasic& other);
    virtual ItsRoadWorksContainerBasic *dup() const override {return new ItsRoadWorksContainerBasic(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsRoadWorksContainerBasic& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsRoadWorksContainerBasic& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:209</tt> by nedtool.
 * <pre>
 * class ItsRescueContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsRescueContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsRescueContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsRescueContainer&);

  public:
    ItsRescueContainer();
    ItsRescueContainer(const ItsRescueContainer& other);
    virtual ~ItsRescueContainer();
    ItsRescueContainer& operator=(const ItsRescueContainer& other);
    virtual ItsRescueContainer *dup() const override {return new ItsRescueContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsRescueContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsRescueContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:214</tt> by nedtool.
 * <pre>
 * class ItsEmergencyContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsEmergencyContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsEmergencyContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsEmergencyContainer&);

  public:
    ItsEmergencyContainer();
    ItsEmergencyContainer(const ItsEmergencyContainer& other);
    virtual ~ItsEmergencyContainer();
    ItsEmergencyContainer& operator=(const ItsEmergencyContainer& other);
    virtual ItsEmergencyContainer *dup() const override {return new ItsEmergencyContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsEmergencyContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsEmergencyContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:219</tt> by nedtool.
 * <pre>
 * class ItsSafetyCarContainer extends ItsSpecialVehicleContainer
 * {
 * }
 * </pre>
 */
class ROVER_API ItsSafetyCarContainer : public ::rover::ItsSpecialVehicleContainer
{
  protected:

  private:
    void copy(const ItsSafetyCarContainer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsSafetyCarContainer&);

  public:
    ItsSafetyCarContainer();
    ItsSafetyCarContainer(const ItsSafetyCarContainer& other);
    virtual ~ItsSafetyCarContainer();
    ItsSafetyCarContainer& operator=(const ItsSafetyCarContainer& other);
    virtual ItsSafetyCarContainer *dup() const override {return new ItsSafetyCarContainer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsSafetyCarContainer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsSafetyCarContainer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:223</tt> by nedtool.
 * <pre>
 * class ItsPduHeader extends ItsBase
 * {
 *     int protocolVersion;
 *     ItsMessageId messageId;
 *     int stationId; // using omnet node id?
 * }
 * </pre>
 */
class ROVER_API ItsPduHeader : public ::rover::ItsBase
{
  protected:
    int protocolVersion = 0;
    rover::ItsMessageId messageId = static_cast<rover::ItsMessageId>(-1);
    int stationId = 0;

  private:
    void copy(const ItsPduHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsPduHeader&);

  public:
    ItsPduHeader();
    ItsPduHeader(const ItsPduHeader& other);
    virtual ~ItsPduHeader();
    ItsPduHeader& operator=(const ItsPduHeader& other);
    virtual ItsPduHeader *dup() const override {return new ItsPduHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getProtocolVersion() const;
    virtual void setProtocolVersion(int protocolVersion);
    virtual rover::ItsMessageId getMessageId() const;
    virtual void setMessageId(rover::ItsMessageId messageId);
    virtual int getStationId() const;
    virtual void setStationId(int stationId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsPduHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsPduHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:230</tt> by nedtool.
 * <pre>
 * class ItsCam extends inet::ApplicationPacket
 * {
 *     ItsPduHeader itsHeader;
 *     simtime_t generationDeltaTime; // Time corresponding to the time of the reference position
 *     //CoopAwareness Parameters 
 *     ItsBasicContainer basicContainer; // type, position
 *     ItsHfContainer hfContainer;
 *     ItsLfContainer lfContainer; // optional
 *     ItsSpecialVehicleContainer specialContainer; // optional
 * }
 * </pre>
 */
class ROVER_API ItsCam : public ::inet::ApplicationPacket
{
  protected:
    ItsPduHeader itsHeader;
    omnetpp::simtime_t generationDeltaTime = SIMTIME_ZERO;
    ItsBasicContainer basicContainer;
    ItsHfContainer hfContainer;
    ItsLfContainer lfContainer;
    ItsSpecialVehicleContainer specialContainer;

  private:
    void copy(const ItsCam& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsCam&);

  public:
    ItsCam();
    ItsCam(const ItsCam& other);
    virtual ~ItsCam();
    ItsCam& operator=(const ItsCam& other);
    virtual ItsCam *dup() const override {return new ItsCam(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const ItsPduHeader& getItsHeader() const;
    virtual ItsPduHeader& getItsHeaderForUpdate() { handleChange();return const_cast<ItsPduHeader&>(const_cast<ItsCam*>(this)->getItsHeader());}
    virtual void setItsHeader(const ItsPduHeader& itsHeader);
    virtual omnetpp::simtime_t getGenerationDeltaTime() const;
    virtual void setGenerationDeltaTime(omnetpp::simtime_t generationDeltaTime);
    virtual const ItsBasicContainer& getBasicContainer() const;
    virtual ItsBasicContainer& getBasicContainerForUpdate() { handleChange();return const_cast<ItsBasicContainer&>(const_cast<ItsCam*>(this)->getBasicContainer());}
    virtual void setBasicContainer(const ItsBasicContainer& basicContainer);
    virtual const ItsHfContainer& getHfContainer() const;
    virtual ItsHfContainer& getHfContainerForUpdate() { handleChange();return const_cast<ItsHfContainer&>(const_cast<ItsCam*>(this)->getHfContainer());}
    virtual void setHfContainer(const ItsHfContainer& hfContainer);
    virtual const ItsLfContainer& getLfContainer() const;
    virtual ItsLfContainer& getLfContainerForUpdate() { handleChange();return const_cast<ItsLfContainer&>(const_cast<ItsCam*>(this)->getLfContainer());}
    virtual void setLfContainer(const ItsLfContainer& lfContainer);
    virtual const ItsSpecialVehicleContainer& getSpecialContainer() const;
    virtual ItsSpecialVehicleContainer& getSpecialContainerForUpdate() { handleChange();return const_cast<ItsSpecialVehicleContainer&>(const_cast<ItsCam*>(this)->getSpecialContainer());}
    virtual void setSpecialContainer(const ItsSpecialVehicleContainer& specialContainer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsCam& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsCam& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/common/ItsPdu.msg:241</tt> by nedtool.
 * <pre>
 * class ItsVam extends inet::ApplicationPacket
 * {
 *     ItsPduHeader itsHeader; // ITS-S Id/ Packet Type (CAM, VAM, ...)
 *     simtime_t generationDeltaTime; // Time corresponding to the time of the reference position
 *     ItsVamBasicContainer basicContainer; // Profile, Type, Device, referencePosition, pathHistory
 *     ItsVamHfContainer hfContainer; // speed, Prediction for Speed, Trajectory
 *     ItsLfContainer lfContainer; // optional
 *     ItsVamClusterContainer clusterContainer; // Cluster Paramters
 * }
 * </pre>
 */
class ROVER_API ItsVam : public ::inet::ApplicationPacket
{
  protected:
    ItsPduHeader itsHeader;
    omnetpp::simtime_t generationDeltaTime = SIMTIME_ZERO;
    ItsVamBasicContainer basicContainer;
    ItsVamHfContainer hfContainer;
    ItsLfContainer lfContainer;
    ItsVamClusterContainer clusterContainer;

  private:
    void copy(const ItsVam& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ItsVam&);

  public:
    ItsVam();
    ItsVam(const ItsVam& other);
    virtual ~ItsVam();
    ItsVam& operator=(const ItsVam& other);
    virtual ItsVam *dup() const override {return new ItsVam(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const ItsPduHeader& getItsHeader() const;
    virtual ItsPduHeader& getItsHeaderForUpdate() { handleChange();return const_cast<ItsPduHeader&>(const_cast<ItsVam*>(this)->getItsHeader());}
    virtual void setItsHeader(const ItsPduHeader& itsHeader);
    virtual omnetpp::simtime_t getGenerationDeltaTime() const;
    virtual void setGenerationDeltaTime(omnetpp::simtime_t generationDeltaTime);
    virtual const ItsVamBasicContainer& getBasicContainer() const;
    virtual ItsVamBasicContainer& getBasicContainerForUpdate() { handleChange();return const_cast<ItsVamBasicContainer&>(const_cast<ItsVam*>(this)->getBasicContainer());}
    virtual void setBasicContainer(const ItsVamBasicContainer& basicContainer);
    virtual const ItsVamHfContainer& getHfContainer() const;
    virtual ItsVamHfContainer& getHfContainerForUpdate() { handleChange();return const_cast<ItsVamHfContainer&>(const_cast<ItsVam*>(this)->getHfContainer());}
    virtual void setHfContainer(const ItsVamHfContainer& hfContainer);
    virtual const ItsLfContainer& getLfContainer() const;
    virtual ItsLfContainer& getLfContainerForUpdate() { handleChange();return const_cast<ItsLfContainer&>(const_cast<ItsVam*>(this)->getLfContainer());}
    virtual void setLfContainer(const ItsLfContainer& lfContainer);
    virtual const ItsVamClusterContainer& getClusterContainer() const;
    virtual ItsVamClusterContainer& getClusterContainerForUpdate() { handleChange();return const_cast<ItsVamClusterContainer&>(const_cast<ItsVam*>(this)->getClusterContainer());}
    virtual void setClusterContainer(const ItsVamClusterContainer& clusterContainer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ItsVam& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ItsVam& obj) {obj.parsimUnpack(b);}

} // namespace rover

#endif // ifndef __ROVER_ITSPDU_M_H

