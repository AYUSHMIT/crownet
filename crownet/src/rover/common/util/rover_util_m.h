//
// Generated file, do not edit! Created by nedtool 5.6 from rover/common/util/rover_util.msg.
//

#ifndef __ROVER_ROVER_UTIL_M_H
#define __ROVER_ROVER_UTIL_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#  if defined(ROVER_EXPORT)
#    define ROVER_API  OPP_DLLEXPORT
#  elif defined(ROVER_IMPORT)
#    define ROVER_API  OPP_DLLIMPORT
#  else
#    define ROVER_API
#  endif
#endif


namespace rover {

class PathPoint;
} // namespace rover

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry


namespace rover {

/**
 * Class generated from <tt>rover/common/util/rover_util.msg:23</tt> by nedtool.
 * <pre>
 * class PathPoint extends cObject
 * {
 *     \@customize(true);
 * 
 *     inet::Coord referencePoint;
 *     simtime_t referenceTime;
 * }
 * </pre>
 *
 * PathPoint_Base is only useful if it gets subclassed, and PathPoint is derived from it.
 * The minimum code to be written for PathPoint is the following:
 *
 * <pre>
 * class ROVER_API PathPoint : public PathPoint_Base
 * {
 *   private:
 *     void copy(const PathPoint& other) { ... }

 *   public:
 *     PathPoint() : PathPoint_Base() {}
 *     PathPoint(const PathPoint& other) : PathPoint_Base(other) {copy(other);}
 *     PathPoint& operator=(const PathPoint& other) {if (this==&other) return *this; PathPoint_Base::operator=(other); copy(other); return *this;}
 *     virtual PathPoint *dup() const override {return new PathPoint(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from PathPoint_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(PathPoint)
 * </pre>
 */
class ROVER_API PathPoint_Base : public ::omnetpp::cObject
{
  protected:
    inet::Coord referencePoint;
    omnetpp::simtime_t referenceTime = SIMTIME_ZERO;

  private:
    void copy(const PathPoint_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PathPoint_Base&);
    // make constructors protected to avoid instantiation
    PathPoint_Base();
    PathPoint_Base(const PathPoint_Base& other);
    // make assignment operator protected to force the user override it
    PathPoint_Base& operator=(const PathPoint_Base& other);

  public:
    virtual ~PathPoint_Base();
    virtual PathPoint_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class PathPoint");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::Coord& getReferencePoint() const;
    virtual inet::Coord& getReferencePointForUpdate() { return const_cast<inet::Coord&>(const_cast<PathPoint_Base*>(this)->getReferencePoint());}
    virtual void setReferencePoint(const inet::Coord& referencePoint);
    virtual omnetpp::simtime_t getReferenceTime() const;
    virtual void setReferenceTime(omnetpp::simtime_t referenceTime);
};

} // namespace rover

#endif // ifndef __ROVER_ROVER_UTIL_M_H

