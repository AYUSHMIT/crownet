//
// Generated file, do not edit! Created by nedtool 5.6 from rover/aid/AidCommand.msg.
//

#ifndef __ROVER_AIDCOMMAND_M_H
#define __ROVER_AIDCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#  if defined(ROVER_EXPORT)
#    define ROVER_API  OPP_DLLEXPORT
#  elif defined(ROVER_IMPORT)
#    define ROVER_API  OPP_DLLIMPORT
#  else
#    define ROVER_API
#  endif
#endif


namespace rover {

class AidCommand;
class AidBindCommand;
class AidAppReqCommand;
class AidAppCapCommand;
class AidConnectCommand;
class AidCloseCommand;
class AidDestroyCommand;
class AidControlInfo;
class AidErrorInfo;
class AidStatusInfo;
} // namespace rover

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/networklayer/common/IpProtocolId_m.h" // import inet.networklayer.common.IpProtocolId

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace rover {

/**
 * Enum generated from <tt>rover/aid/AidCommand.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // AID command codes, sent by the application to AID. These constants
 * // should be set as message kind on a message sent to the AID entity.
 * //
 * enum AidCommandCode
 * {
 *     AID_C_BIND = 1;  // send by application to initiliaze AID Socket.
 *     AID_C_APP_REQ = 2; // send by application requirements to AID Layer. (used to determine matching dissemination)
 *     AID_C_APP_CAP = 3; // send by application capabilities to AID Layer. (used to determine matching dissemination)
 *     AID_C_CONNECT = 4; // send by application to finalize setup.
 *     AID_C_DATA = 5; // send()/sendTo() by application
 *     AID_C_CLOSE = 6; //
 *     AID_C_DESTROY = 7; // destroy(); see ~AidDestroyCommand
 * }
 * </pre>
 */
enum AidCommandCode {
    AID_C_BIND = 1,
    AID_C_APP_REQ = 2,
    AID_C_APP_CAP = 3,
    AID_C_CONNECT = 4,
    AID_C_DATA = 5,
    AID_C_CLOSE = 6,
    AID_C_DESTROY = 7
};

/**
 * Enum generated from <tt>rover/aid/AidCommand.msg:37</tt> by nedtool.
 * <pre>
 * enum AidRecipientClass
 * {
 *     ALL = 1;		// messages are for all recipient indepenten of geograpic location
 *     ALL_LOCAL = 2;
 *     SOME = 3;
 *     SOME_LOCAL = 4;
 *     ONE = 5;
 *     ONE_LOCAL = 6;
 * }
 * </pre>
 */
enum AidRecipientClass {
    ALL = 1,
    ALL_LOCAL = 2,
    SOME = 3,
    SOME_LOCAL = 4,
    ONE = 5,
    ONE_LOCAL = 6
};

/**
 * Enum generated from <tt>rover/aid/AidCommand.msg:53</tt> by nedtool.
 * <pre>
 * //
 * // AID indications, sent by AID to the application. AID will set these
 * // constants as message kind on messages it sends to the application.
 * //
 * enum AidStatusInd
 * {
 *     AID_I_DATA = 0;
 *     AID_I_ERROR = 1;
 *     AID_I_STATUS = 2;
 *     AID_I_CLOSE = 3;
 * 
 * }
 * </pre>
 */
enum AidStatusInd {
    AID_I_DATA = 0,
    AID_I_ERROR = 1,
    AID_I_STATUS = 2,
    AID_I_CLOSE = 3
};

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:62</tt> by nedtool.
 * <pre>
 * class AidCommand extends cObject
 * {
 *     int userId = -1;   // id than can be freely used by the app
 * }
 * </pre>
 */
class ROVER_API AidCommand : public ::omnetpp::cObject
{
  protected:
    int userId = -1;

  private:
    void copy(const AidCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidCommand&);

  public:
    AidCommand();
    AidCommand(const AidCommand& other);
    virtual ~AidCommand();
    AidCommand& operator=(const AidCommand& other);
    virtual AidCommand *dup() const override {return new AidCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getUserId() const;
    virtual void setUserId(int userId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:66</tt> by nedtool.
 * <pre>
 * class AidBindCommand extends AidCommand
 * {
 *     inet::L3Address localAddr;
 *     int localPort = -1;
 * }
 * </pre>
 */
class ROVER_API AidBindCommand : public ::rover::AidCommand
{
  protected:
    inet::L3Address localAddr;
    int localPort = -1;

  private:
    void copy(const AidBindCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidBindCommand&);

  public:
    AidBindCommand();
    AidBindCommand(const AidBindCommand& other);
    virtual ~AidBindCommand();
    AidBindCommand& operator=(const AidBindCommand& other);
    virtual AidBindCommand *dup() const override {return new AidBindCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::L3Address& getLocalAddr() const;
    virtual inet::L3Address& getLocalAddrForUpdate() { return const_cast<inet::L3Address&>(const_cast<AidBindCommand*>(this)->getLocalAddr());}
    virtual void setLocalAddr(const inet::L3Address& localAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidBindCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidBindCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:74</tt> by nedtool.
 * <pre>
 * //
 * // Base class for AID socket option control info classes.
 * //
 * class AidAppReqCommand extends AidCommand
 * {
 *     double minRate; // minimum neede message rate of the application
 *     double maxRate = -1.0; // maximum usefull rate for the application (-1.0 no max rate)
 *     AidRecipientClass recipientClass;
 *     inet::L3Address remoteAddr;
 *     int remotePort = -1;
 * }
 * </pre>
 */
class ROVER_API AidAppReqCommand : public ::rover::AidCommand
{
  protected:
    double minRate = 0;
    double maxRate = -1.0;
    rover::AidRecipientClass recipientClass = static_cast<rover::AidRecipientClass>(-1);
    inet::L3Address remoteAddr;
    int remotePort = -1;

  private:
    void copy(const AidAppReqCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidAppReqCommand&);

  public:
    AidAppReqCommand();
    AidAppReqCommand(const AidAppReqCommand& other);
    virtual ~AidAppReqCommand();
    AidAppReqCommand& operator=(const AidAppReqCommand& other);
    virtual AidAppReqCommand *dup() const override {return new AidAppReqCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getMinRate() const;
    virtual void setMinRate(double minRate);
    virtual double getMaxRate() const;
    virtual void setMaxRate(double maxRate);
    virtual rover::AidRecipientClass getRecipientClass() const;
    virtual void setRecipientClass(rover::AidRecipientClass recipientClass);
    virtual const inet::L3Address& getRemoteAddr() const;
    virtual inet::L3Address& getRemoteAddrForUpdate() { return const_cast<inet::L3Address&>(const_cast<AidAppReqCommand*>(this)->getRemoteAddr());}
    virtual void setRemoteAddr(const inet::L3Address& remoteAddr);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidAppReqCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidAppReqCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:82</tt> by nedtool.
 * <pre>
 * class AidAppCapCommand extends AidCommand
 * {
 * }
 * </pre>
 */
class ROVER_API AidAppCapCommand : public ::rover::AidCommand
{
  protected:

  private:
    void copy(const AidAppCapCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidAppCapCommand&);

  public:
    AidAppCapCommand();
    AidAppCapCommand(const AidAppCapCommand& other);
    virtual ~AidAppCapCommand();
    AidAppCapCommand& operator=(const AidAppCapCommand& other);
    virtual AidAppCapCommand *dup() const override {return new AidAppCapCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidAppCapCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidAppCapCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:86</tt> by nedtool.
 * <pre>
 * class AidConnectCommand extends AidCommand
 * {
 * }
 * </pre>
 */
class ROVER_API AidConnectCommand : public ::rover::AidCommand
{
  protected:

  private:
    void copy(const AidConnectCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidConnectCommand&);

  public:
    AidConnectCommand();
    AidConnectCommand(const AidConnectCommand& other);
    virtual ~AidConnectCommand();
    AidConnectCommand& operator=(const AidConnectCommand& other);
    virtual AidConnectCommand *dup() const override {return new AidConnectCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidConnectCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidConnectCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:90</tt> by nedtool.
 * <pre>
 * class AidCloseCommand extends AidCommand
 * {
 * }
 * </pre>
 */
class ROVER_API AidCloseCommand : public ::rover::AidCommand
{
  protected:

  private:
    void copy(const AidCloseCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidCloseCommand&);

  public:
    AidCloseCommand();
    AidCloseCommand(const AidCloseCommand& other);
    virtual ~AidCloseCommand();
    AidCloseCommand& operator=(const AidCloseCommand& other);
    virtual AidCloseCommand *dup() const override {return new AidCloseCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidCloseCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidCloseCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:94</tt> by nedtool.
 * <pre>
 * class AidDestroyCommand extends AidCommand
 * {
 * }
 * </pre>
 */
class ROVER_API AidDestroyCommand : public ::rover::AidCommand
{
  protected:

  private:
    void copy(const AidDestroyCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidDestroyCommand&);

  public:
    AidDestroyCommand();
    AidDestroyCommand(const AidDestroyCommand& other);
    virtual ~AidDestroyCommand();
    AidDestroyCommand& operator=(const AidDestroyCommand& other);
    virtual AidDestroyCommand *dup() const override {return new AidDestroyCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidDestroyCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidDestroyCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:98</tt> by nedtool.
 * <pre>
 * class AidControlInfo extends AidCommand
 * {
 * }
 * </pre>
 */
class ROVER_API AidControlInfo : public ::rover::AidCommand
{
  protected:

  private:
    void copy(const AidControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidControlInfo&);

  public:
    AidControlInfo();
    AidControlInfo(const AidControlInfo& other);
    virtual ~AidControlInfo();
    AidControlInfo& operator=(const AidControlInfo& other);
    virtual AidControlInfo *dup() const override {return new AidControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidControlInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:103</tt> by nedtool.
 * <pre>
 * class AidErrorInfo extends AidControlInfo
 * {
 * }
 * </pre>
 */
class ROVER_API AidErrorInfo : public ::rover::AidControlInfo
{
  protected:

  private:
    void copy(const AidErrorInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidErrorInfo&);

  public:
    AidErrorInfo();
    AidErrorInfo(const AidErrorInfo& other);
    virtual ~AidErrorInfo();
    AidErrorInfo& operator=(const AidErrorInfo& other);
    virtual AidErrorInfo *dup() const override {return new AidErrorInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidErrorInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidErrorInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>rover/aid/AidCommand.msg:108</tt> by nedtool.
 * <pre>
 * class AidStatusInfo extends AidControlInfo
 * {
 *     int statusCode = -1;
 * }
 * </pre>
 */
class ROVER_API AidStatusInfo : public ::rover::AidControlInfo
{
  protected:
    int statusCode = -1;

  private:
    void copy(const AidStatusInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AidStatusInfo&);

  public:
    AidStatusInfo();
    AidStatusInfo(const AidStatusInfo& other);
    virtual ~AidStatusInfo();
    AidStatusInfo& operator=(const AidStatusInfo& other);
    virtual AidStatusInfo *dup() const override {return new AidStatusInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getStatusCode() const;
    virtual void setStatusCode(int statusCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AidStatusInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AidStatusInfo& obj) {obj.parsimUnpack(b);}

} // namespace rover

#endif // ifndef __ROVER_AIDCOMMAND_M_H

