//
// Generated file, do not edit! Created by nedtool 5.6 from rover/applications/PositionMapPacket.msg.
//

#ifndef __POSITIONMAPPACKET_M_H
#define __POSITIONMAPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#  if defined(ROVER_EXPORT)
#    define ROVER_API  OPP_DLLEXPORT
#  elif defined(ROVER_IMPORT)
#    define ROVER_API  OPP_DLLIMPORT
#  else
#    define ROVER_API
#  endif
#endif



class PositionMapPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

/**
 * Class generated from <tt>rover/applications/PositionMapPacket.msg:24</tt> by nedtool.
 * <pre>
 * class PositionMapPacket extends inet::ApplicationPacket
 * {
 *     int nodeId;
 *     int cellId[2];
 *     int numCells;
 *     int cellX[];
 *     int cellY[];
 *     int cellCount[];
 *     simtime_t mTime[];
 * }
 * </pre>
 */
class ROVER_API PositionMapPacket : public ::inet::ApplicationPacket
{
  protected:
    int nodeId = 0;
    int cellId[2] = {0};
    int numCells = 0;
    int *cellX = nullptr;
    size_t cellX_arraysize = 0;
    int *cellY = nullptr;
    size_t cellY_arraysize = 0;
    int *cellCount = nullptr;
    size_t cellCount_arraysize = 0;
    omnetpp::simtime_t *mTime = nullptr;
    size_t mTime_arraysize = 0;

  private:
    void copy(const PositionMapPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PositionMapPacket&);

  public:
    PositionMapPacket();
    PositionMapPacket(const PositionMapPacket& other);
    virtual ~PositionMapPacket();
    PositionMapPacket& operator=(const PositionMapPacket& other);
    virtual PositionMapPacket *dup() const override {return new PositionMapPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNodeId() const;
    virtual void setNodeId(int nodeId);
    virtual size_t getCellIdArraySize() const;
    virtual int getCellId(size_t k) const;
    virtual void setCellId(size_t k, int cellId);
    virtual int getNumCells() const;
    virtual void setNumCells(int numCells);
    virtual void setCellXArraySize(size_t size);
    virtual size_t getCellXArraySize() const;
    virtual int getCellX(size_t k) const;
    virtual void setCellX(size_t k, int cellX);
    virtual void insertCellX(int cellX);
    virtual void insertCellX(size_t k, int cellX);
    virtual void eraseCellX(size_t k);
    virtual void setCellYArraySize(size_t size);
    virtual size_t getCellYArraySize() const;
    virtual int getCellY(size_t k) const;
    virtual void setCellY(size_t k, int cellY);
    virtual void insertCellY(int cellY);
    virtual void insertCellY(size_t k, int cellY);
    virtual void eraseCellY(size_t k);
    virtual void setCellCountArraySize(size_t size);
    virtual size_t getCellCountArraySize() const;
    virtual int getCellCount(size_t k) const;
    virtual void setCellCount(size_t k, int cellCount);
    virtual void insertCellCount(int cellCount);
    virtual void insertCellCount(size_t k, int cellCount);
    virtual void eraseCellCount(size_t k);
    virtual void setMTimeArraySize(size_t size);
    virtual size_t getMTimeArraySize() const;
    virtual omnetpp::simtime_t getMTime(size_t k) const;
    virtual void setMTime(size_t k, omnetpp::simtime_t mTime);
    virtual void insertMTime(omnetpp::simtime_t mTime);
    virtual void insertMTime(size_t k, omnetpp::simtime_t mTime);
    virtual void eraseMTime(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PositionMapPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PositionMapPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __POSITIONMAPPACKET_M_H

