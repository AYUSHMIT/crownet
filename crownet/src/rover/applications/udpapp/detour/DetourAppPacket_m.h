//
// Generated file, do not edit! Created by nedtool 5.6 from rover/applications/udpapp/detour/DetourAppPacket.msg.
//

#ifndef __ROVER_DETOURAPPPACKET_M_H
#define __ROVER_DETOURAPPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#  if defined(ROVER_EXPORT)
#    define ROVER_API  OPP_DLLEXPORT
#  elif defined(ROVER_IMPORT)
#    define ROVER_API  OPP_DLLIMPORT
#  else
#    define ROVER_API
#  endif
#endif


namespace rover {

class DetourAppPacket;
} // namespace rover

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace rover {

/**
 * Enum generated from <tt>rover/applications/udpapp/detour/DetourAppPacket.msg:26</tt> by nedtool.
 * <pre>
 * enum DetourPktType
 * {
 *     INCIDENT = 0;
 *     PROPAGATE = 1;
 * }
 * </pre>
 */
enum DetourPktType {
    INCIDENT = 0,
    PROPAGATE = 1
};

/**
 * Class generated from <tt>rover/applications/udpapp/detour/DetourAppPacket.msg:32</tt> by nedtool.
 * <pre>
 * class DetourAppPacket extends inet::ApplicationPacket
 * {
 *     string incidentReason;
 *     simtime_t repeatTime;
 *     simtime_t repeateInterval = 20.0;
 *     string closedTarget;
 *     string alternativeRoute[];
 *     simtime_t firstHopTime;
 *     uint32_t firstHopId;
 *     inet::Coord firstHopOrigin;
 *     simtime_t lastHopTime;
 *     uint32_t lastHopId;
 *     inet::Coord lastHopOrigin;
 *     DetourPktType type;
 * }
 * </pre>
 */
class ROVER_API DetourAppPacket : public ::inet::ApplicationPacket
{
  protected:
    omnetpp::opp_string incidentReason;
    omnetpp::simtime_t repeatTime = SIMTIME_ZERO;
    omnetpp::simtime_t repeateInterval = 20.0;
    omnetpp::opp_string closedTarget;
    omnetpp::opp_string *alternativeRoute = nullptr;
    size_t alternativeRoute_arraysize = 0;
    omnetpp::simtime_t firstHopTime = SIMTIME_ZERO;
    uint32_t firstHopId = 0;
    inet::Coord firstHopOrigin;
    omnetpp::simtime_t lastHopTime = SIMTIME_ZERO;
    uint32_t lastHopId = 0;
    inet::Coord lastHopOrigin;
    rover::DetourPktType type = static_cast<rover::DetourPktType>(-1);

  private:
    void copy(const DetourAppPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DetourAppPacket&);

  public:
    DetourAppPacket();
    DetourAppPacket(const DetourAppPacket& other);
    virtual ~DetourAppPacket();
    DetourAppPacket& operator=(const DetourAppPacket& other);
    virtual DetourAppPacket *dup() const override {return new DetourAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getIncidentReason() const;
    virtual void setIncidentReason(const char * incidentReason);
    virtual omnetpp::simtime_t getRepeatTime() const;
    virtual void setRepeatTime(omnetpp::simtime_t repeatTime);
    virtual omnetpp::simtime_t getRepeateInterval() const;
    virtual void setRepeateInterval(omnetpp::simtime_t repeateInterval);
    virtual const char * getClosedTarget() const;
    virtual void setClosedTarget(const char * closedTarget);
    virtual void setAlternativeRouteArraySize(size_t size);
    virtual size_t getAlternativeRouteArraySize() const;
    virtual const char * getAlternativeRoute(size_t k) const;
    virtual void setAlternativeRoute(size_t k, const char * alternativeRoute);
    virtual void insertAlternativeRoute(const char * alternativeRoute);
    virtual void insertAlternativeRoute(size_t k, const char * alternativeRoute);
    virtual void eraseAlternativeRoute(size_t k);
    virtual omnetpp::simtime_t getFirstHopTime() const;
    virtual void setFirstHopTime(omnetpp::simtime_t firstHopTime);
    virtual uint32_t getFirstHopId() const;
    virtual void setFirstHopId(uint32_t firstHopId);
    virtual const inet::Coord& getFirstHopOrigin() const;
    virtual inet::Coord& getFirstHopOriginForUpdate() { handleChange();return const_cast<inet::Coord&>(const_cast<DetourAppPacket*>(this)->getFirstHopOrigin());}
    virtual void setFirstHopOrigin(const inet::Coord& firstHopOrigin);
    virtual omnetpp::simtime_t getLastHopTime() const;
    virtual void setLastHopTime(omnetpp::simtime_t lastHopTime);
    virtual uint32_t getLastHopId() const;
    virtual void setLastHopId(uint32_t lastHopId);
    virtual const inet::Coord& getLastHopOrigin() const;
    virtual inet::Coord& getLastHopOriginForUpdate() { handleChange();return const_cast<inet::Coord&>(const_cast<DetourAppPacket*>(this)->getLastHopOrigin());}
    virtual void setLastHopOrigin(const inet::Coord& lastHopOrigin);
    virtual rover::DetourPktType getType() const;
    virtual void setType(rover::DetourPktType type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DetourAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DetourAppPacket& obj) {obj.parsimUnpack(b);}

} // namespace rover

#endif // ifndef __ROVER_DETOURAPPPACKET_M_H

