%description:
Test the NeighborhoodTable

%includes:
#include <stdio.h>
#include "crownet/common/NeighborhoodTable.h"

%global:

using namespace crownet;

void test()
{
    simtime_t now = simTime().dbl();
    double maxAge = 3.0;
    NeighborhoodTable nTable;
    nTable.setMaxAge(maxAge);

    NeighborhoodTableEntry e0{0, now - maxAge + 2, now - maxAge + 2, inet::Coord(0.0,0.0), inet::Coord(0.0,0.0)};
    NeighborhoodTableEntry e1{1, now - maxAge + 1, now - maxAge + 1, inet::Coord(1.0,0.0), inet::Coord(0.0,0.0)};
    NeighborhoodTableEntry e2{2, now - maxAge + 0, now - maxAge + 0, inet::Coord(0.0,1.0), inet::Coord(0.0,0.0)};
    NeighborhoodTableEntry e3{3, now - maxAge - 1, now - maxAge - 1, inet::Coord(1.0,1.0), inet::Coord(0.0,0.0)};
    NeighborhoodTableEntry e4{4, now - maxAge - 2, now - maxAge - 2, inet::Coord(2.0,0.0), inet::Coord(0.0,0.0)};
    std::map<int, NeighborhoodTableEntry> internalTable = {{0,e0}, {1,e1}, {2,e2}, {3,e3}, {4,e4}};
    nTable.setTable(internalTable);

    nTable.checkTimeToLive();
   	std::cout << "internalTable size: " << internalTable.size() << std::endl;
   	std::cout << "nTable size: " << nTable.getTable().size() << std::endl;

    // check table entries
   	std::cout << "count id 0: " << nTable.getTable().count(0) << std::endl;
   	std::cout << "count id 1: " << nTable.getTable().count(1) << std::endl;
   	std::cout << "count id 2: " << nTable.getTable().count(2) << std::endl;
   	std::cout << "count id 3: " << nTable.getTable().count(3) << std::endl;
   	std::cout << "count id 4: " << nTable.getTable().count(4) << std::endl;
}

%activity:

test();

%contains: stdout

internalTable size: 5
nTable size: 3
count id 0: 1
count id 1: 1
count id 2: 1
count id 3: 0
count id 4: 0

