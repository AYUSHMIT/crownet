//
// Generated file, do not edit! Created by nedtool 5.6 from
// rover/applications/udpapp/DetourAppPacket.msg.
//

#ifndef __ROVER_DETOURAPPPACKET_M_H
#define __ROVER_DETOURAPPPACKET_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION != OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef ROVER_API
#if defined(ROVER_EXPORT)
#define ROVER_API OPP_DLLEXPORT
#elif defined(ROVER_IMPORT)
#define ROVER_API OPP_DLLIMPORT
#else
#define ROVER_API
#endif
#endif

namespace rover {

class DetourAppPacket;
}  // namespace rover

#include "inet/common/INETDefs_m.h"  // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h"  // import inet.common.packet.chunk.Chunk

#include "inet/applications/base/ApplicationPacket_m.h"  // import inet.applications.base.ApplicationPacket

namespace rover {

/**
 * Class generated from
 * <tt>rover/applications/udpapp/DetourAppPacket.msg:23</tt> by nedtool. <pre>
 * class DetourAppPacket extends inet::ApplicationPacket
 * {
 *     string reason;
 *     simtime_t eventTime;
 *     simtime_t repeatTime;
 *     simtime_t repeateInterval = 20.0;
 *     int closedTarget;
 *     int alternativeRoute[];
 * }
 * </pre>
 */
class ROVER_API DetourAppPacket : public ::inet::ApplicationPacket {
 protected:
  omnetpp::opp_string reason;
  omnetpp::simtime_t eventTime = SIMTIME_ZERO;
  omnetpp::simtime_t repeatTime = SIMTIME_ZERO;
  omnetpp::simtime_t repeateInterval = 20.0;
  int closedTarget = 0;
  int* alternativeRoute = nullptr;
  size_t alternativeRoute_arraysize = 0;

 private:
  void copy(const DetourAppPacket& other);

 protected:
  // protected and unimplemented operator==(), to prevent accidental usage
  bool operator==(const DetourAppPacket&);

 public:
  DetourAppPacket();
  DetourAppPacket(const DetourAppPacket& other);
  virtual ~DetourAppPacket();
  DetourAppPacket& operator=(const DetourAppPacket& other);
  virtual DetourAppPacket* dup() const override {
    return new DetourAppPacket(*this);
  }
  virtual void parsimPack(omnetpp::cCommBuffer* b) const override;
  virtual void parsimUnpack(omnetpp::cCommBuffer* b) override;

  // field getter/setter methods
  virtual const char* getReason() const;
  virtual void setReason(const char* reason);
  virtual omnetpp::simtime_t getEventTime() const;
  virtual void setEventTime(omnetpp::simtime_t eventTime);
  virtual omnetpp::simtime_t getRepeatTime() const;
  virtual void setRepeatTime(omnetpp::simtime_t repeatTime);
  virtual omnetpp::simtime_t getRepeateInterval() const;
  virtual void setRepeateInterval(omnetpp::simtime_t repeateInterval);
  virtual int getClosedTarget() const;
  virtual void setClosedTarget(int closedTarget);
  virtual void setAlternativeRouteArraySize(size_t size);
  virtual size_t getAlternativeRouteArraySize() const;
  virtual int getAlternativeRoute(size_t k) const;
  virtual void setAlternativeRoute(size_t k, int alternativeRoute);
  virtual void insertAlternativeRoute(int alternativeRoute);
  virtual void insertAlternativeRoute(size_t k, int alternativeRoute);
  virtual void eraseAlternativeRoute(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer* b,
                            const DetourAppPacket& obj) {
  obj.parsimPack(b);
}
inline void doParsimUnpacking(omnetpp::cCommBuffer* b, DetourAppPacket& obj) {
  obj.parsimUnpack(b);
}

}  // namespace rover

#endif  // ifndef __ROVER_DETOURAPPPACKET_M_H
