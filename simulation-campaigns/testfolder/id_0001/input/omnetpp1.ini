[General]


sim-time-limit = 20s
**.routingRecorder.enabled = true

outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"


############### Statistics ##################
experiment-label = ${datetime}
output-scalar-file = ${resultdir}/${configname}/${experiment}/${datetime}_vars_${iterationvarsf}_rep_${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${experiment}/${datetime}_vars_${iterationvarsf}_rep_${repetition}.vec
repeat = 1
seed-set = ${repetition}
**.vector-recording = true
**.scalar-recording = true

################ Mobility parameters #####################
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m


############### AMC MODULE PARAMETERS ###############
**.numRbDl = 25
**.numRbUl = 25
**.numBands = 25

############### Channel model parameters ###############

**.channelModel.shadowing = true
**.channelModel.scenario = "URBAN_MICROCELL"
**.channelModel.nodeb_height = 1.5
**.channelModel.ue_height = 1.5
**.channelModel.building_height = 20

**.channelModel.street_wide = 20
**.channelModel.carrierFrequency = 2.6  # carrier frequency (in GHz)
**.channelModel.antennaGainUe = 0
**.channelModel.antennGainEnB = 0

**.channelModel.dynamic_los = false   # If true enable the possibility to switch dinamically the LOS/NLOS pathloss computation
**.channelModel.fixed_los = true      # If dynamic-los is false this parameter, if true, compute LOS pathloss otherwise compute NLOS pathloss
**.channelModel.fading = false        # Enable/disable fading
**.channelModel.fading_type = "JAKES" # Fading type (JAKES or RAYGHLEY) if fading is enabled
**.channelModel.fading_paths = 6      # If jakes fading this parameter specify the number of path (tap channel)
**.channelModel.delay_rms = 363e-9

**.channelModel.extCell_interference = false # if true, enables the inter-cell interference computation for DL connections from external cells
**.channelModel.downlink_interference = true # if true, enables the inter-cell interference computation for DL connections
**.channelModel.uplink_interference = true   # if true, enables the interference computation for UL connections
**.channelModel.d2d_interference = true      # if true, enables the interference computation for D2D connections


### eNodeBs configuration ###
*.eNB.mobility.initFromDisplayString = false
*.eNB.mobility.initialX = 20m
*.eNB.mobility.initialY = 20m


### UEs configuration ### (set via traci)
*.numUeCell = 0
*.numUeD2D = 0
*.ue*[*].macCellId = 1
*.ue*[*].masterId = 1

[Config appSetup1]

### Traffic configuration ###
network = rover.simulations.networks.LTE_d2d

# One-to-Many traffic between UEs (ueD2D[0] --> ueD2DRx[1..2])
# Transmitter
*.ueD2DSender[*].numApps = 2
*.ueD2DSender[*].app[0].typename = "AlertSender"
*.ueD2DSender[*].app[0].localPort = 3088+ancestorIndex(0)
*.ueD2DSender[*].app[0].startTime = uniform(0s,0.02s)
*.ueD2DSender[*].app[0].stopTime = 20s
*.ueD2DSender[*].app[0].destAddress = "224.0.0.10"          # IP address of the multicast group
*.ueD2DSender[*].app[0].destPort = 1000
*.ueD2DSender[*].app[1].typename = "AlertReceiver"
*.ueD2DSender[*].app[1].localPort = 1000

# Receivers (they must belong to the above multicast group (see demo.xml)
*.ueD2DReceiver[*].numApps = 1
*.ueD2DReceiver[*].app[0].typename = "AlertReceiver"
*.ueD2DReceiver[*].app[0].localPort = 1000

# Enable D2D for the eNodeB and the UEs involved in direct commulteNications
*.eNB*.nicType = "LteNicEnbD2D"
*.ueD2D*[*].nicType = "LteNicUeD2D"
**.amcMode = "D2D"

# enrolled multicast groups must be set in the HostAutoConfigurator (instead of demo.xml), seperated by a single space character
*.ueD2D*[*].configurator.mcastGroups = "224.0.0.10"

# --- Select CQI for D2D transmissions --- #
#
# One-to-Many commulteNications work with fixed CQI values only. Set the parameter **.usePreconfiguredTxParams and
# select the desired CQI using the parameter **.d2dCqi
**.usePreconfiguredTxParams = true
**.d2dCqi = 7


[Config vadere00]
extends = appSetup1
network = rover.simulations.networks.LTE_d2d_Vadere

*.numMappings = 1
*.mappingDistribution[0].mapping_root="pedestrian"
*.mappingDistribution[0].mapping_moduleName="p1=ueD2DReceiver p2=ueD2DSender"
*.mappingDistribution[0].mapping_distribution="p1=0.5 p2=0.5}"


# traci manager
*.manager.updateInterval = 0.4s
*.manager.host = "vadere"
*.manager.port = 9998
*.manager.moduleType = "pedestrian=rover.nodes.MobileUe"
*.manager.moduleName = "pedestrian=ueD2D"
*.manager.moduleDisplayString = "pedestrian='i=veins/node/pedestrian;is=vs'"
*.manager.margin = 0
*.manager.vadereCachePath = "vadere-cache/veins-test"
*.manager.visualizer = "visualization"
*.manager.vadereScenarioPath = "mf_klein_initial_peds.scenario"


# PhysicalEnviroment
*.physicalEnvironment.config = xmldoc("mf_klein_initial_peds_env.xml")
*.physicalEnvironment.spaceMinX = -100m
*.physicalEnvironment.spaceMinY = -100m
*.physicalEnvironment.spaceMinZ = -100m
*.physicalEnvironment.spaceMaxX = 600m
*.physicalEnvironment.spaceMaxY = 600m
*.physicalEnvironment.spaceMaxZ = 600m


[Config vadere01]
extends = vadere00
**.channelModel.scenario = "URBAN_MACROCELL"


[Config sumo00]
extends = appSetup1
network = rover.simulations.networks.LTE_d2d_SUMO

# SUMO Setup
*.playgroundSizeX = 2500m
*.playgroundSizeY = 2500m
*.playgroundSizeZ = 50m
*.annotations.draw = true

# PhysicalEnviroment
*.manager.sumoConfigDir = "sumo"
*.manager.launchConfig = xmldoc("sumo/mf_base_001.launchd.xml")
*.manager.moduleType = "DEFAULT_PEDTYPE=rover.nodes.MobileUe"
*.manager.moduleName = "DEFAULT_PEDTYPE=ueD2D"
*.manager.moduleDisplayString = "DEFAULT_PEDTYPE='i=veins/node/pedestrian;is=vs'"
*.manager.updateInterval = 0.5s
*.manager.host = "sumo"
*.manager.port = 9999
*.manager.autoShutdown = true

*.ueD2D*[0].app[*].stopTime = 12.9s
