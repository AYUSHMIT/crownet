#!/bin/bash
# fail when one of the command fails
set -e 

wait_symbol () {
	spin[0]="-"
	spin[1]="\\"
	spin[2]="|"
	spin[3]="/"
        echo "Process started: `date`"
	while kill -0 $1 2> /dev/null; do
	for i in "${spin[@]}"
	do
	    echo -ne "\b\b\b\b\b\b\b\b\b\b\b\b\bIn Progress $i"
	    sleep 0.1
	done
	done
	echo " "
}

source ${CROWNET_HOME}/setup -i

if [ -z "${OPP_EXTERN_DATA_MNT}" ]; then
      echo 'Variabel 'OPP_EXTERN_DATA_MNT' not set. Example > export OPP_EXTERN_DATA_MNT="/mnt/data1TB/:/mnt/data1TB:rw"'
      exit -1
fi

echo "##################################### prepare output directory  #######################################"

output_folder=${CROWNET_HOME}/output_diss_cm
echo "Write output of simulations to the directory ${output_folder}/"
mkdir -p ${output_folder}

LOG_FILE="${output_folder}/log.out"
echo "This directory contains figures and tables used in Christina Mayr's disseration thesis" > $LOG_FILE
echo "Script started: `date`"| tee -a $LOG_FILE

echo "########################################### build CrowNet and  ########################################"

#get containers

docker pull ghcr.io/rover-hm/omnetpp:${CROWNET_OPP_CONT_TAG} | tee -a $LOG_FILE
docker pull ghcr.io/rover-hm/vadere:${CROWNET_VADERE_CONT_TAG} | tee -a $LOG_FILE
docker pull ghcr.io/rover-hm/flowcontrol:${CROWNET_CONTROL_CONT_TAG} | tee -a $LOG_FILE

docker tag ghcr.io/rover-hm/omnetpp:${CROWNET_OPP_CONT_TAG} ${CROWNET_IMAGE_BASE}/omnetpp:${CROWNET_OPP_CONT_TAG} | tee -a $LOG_FILE
docker tag ghcr.io/rover-hm/vadere:${CROWNET_VADERE_CONT_TAG}  ${CROWNET_IMAGE_BASE}/vadere:${CROWNET_VADERE_CONT_TAG} | tee -a $LOG_FILE
docker tag ghcr.io/rover-hm/flowcontrol:${CROWNET_CONTROL_CONT_TAG} ${CROWNET_IMAGE_BASE}/flowcontrol:${CROWNET_CONTROL_CONT_TAG} | tee -a $LOG_FILE

echo "Build omnetpp." | tee -a $LOG_FILE
cd $CROWNET_HOME 
set +e 
echo "Clean diretory"
omnetpp exec make cleanall >> $LOG_FILE 2>&1 & pid=$! && wait_symbol $pid
set -e
echo "Create makefiles"
omnetpp exec make makefiles >> $LOG_FILE 2>&1  & pid=$! && wait_symbol $pid
echo "Start actual build process"
omnetpp exec make MODE=release >> $LOG_FILE 2>&1 & pid=$! && wait_symbol $pid
wait_symbol $pid
echo "Built of omnetpp finished." | tee -a $LOG_FILE

echo "Start building virtual python enviroment." | tee -a $LOG_FILE
rm -rf ${CROWNET_HOME}/out
omnetpp exec make analysis-clean >> $LOG_FILE 2>&1 
echo "Build source distributions"
omnetpp exec make analysis-build >> $LOG_FILE 2>&1 & pid=$! && wait_symbol $pid
echo "Install requirements and source distributions in virtual env /out/crownet_user"
omnetpp exec make out/crownet_user 2>&1 >> $LOG_FILE 2>&1 & pid=$! && wait_symbol $pid
echo "Built of virtual python enviroment finished." | tee -a $LOG_FILE


echo "####################################### run the simulations  ##########################################"

source ${CROWNET_HOME}/out/crownet_user/bin/activate


echo "################################### information dissemination uq study #################################"

simulation_dir="${CROWNET_HOME}/analysis/uq/simulation_studies/forward_propagation_and_sensitvity_analysis"
result_dir="${simulation_dir}/PolynomialChaos_results"

echo "Run the uq study: ${simulation_dir}" | tee -a $LOG_FILE
echo "Simulation started: `date`"| tee -a $LOG_FILE

cd ${simulation_dir}
python3 step2_run_simulations.py & pid=$! && wait_symbol $pid

echo "Simulation finished: `date`"| tee -a $LOG_FILE
echo "Copy simulation results from ${result_dir} to ${output_folder}/direct_communication" | tee -a $LOG_FILE           
cp -r ${result_dir} ${output_folder}/direct_communication/

exit 0



echo "####################################### compare guiding strategies ########################################"



simulation_dir="${CROWNET_HOME}/analysis/uq/simulation_studies/guiding_crowds_forward_propagation"
echo "Run the simulation study: compare guiding strategies in the simulation directory: ${simulation_dir}" | tee -a $LOG_FILE
echo "Simulation started: `date`"| tee -a $LOG_FILE

cd ${simulation_dir}
python3 run_simulations.py & pid=$! && wait_symbol $pid

#TODO analyze results

echo "#################################### sim : realistic scenario ########################################"

simulation_dir="${CROWNET_HOME}/crownet/simulations/mucFreiheit_route_choice_app"
echo "Run the simulation of the realistic scenario in the simulation directory: ${simulation_dir}" | tee -a $LOG_FILE
echo "Simulation started: `date`"| tee -a $LOG_FILE

config="final"
label="diss_cm"
result_dir="${simulation_dir}/results/${config}_${label}"

cd ${simulation_dir}
python3 run_script.py vadere-opp-control --write-container-log --create-vadere-container --override-host-config --experiment-label "${label}" --vadere-tag 496ff02c --control-tag 496ff02c --omnet-tag 6.0.1 --with-control control.py --ctrl.controller-type MinimalDensity --opp.-c "${config}" --qoi number_of_peds.txt path_choice.txt densities_mapped.txt packet_loss_info_diss.csv packet_loss_heat_map.csv heat_map_diss_time.csv info_diss_time.csv simsec_sec_ratio.csv docker_stats.csv --log-docker-stats >> $LOG_FILE & pid=$!
wait_symbol $pid

echo "Simulation finished : `date`"| tee -a $LOG_FILE
echo "Copy simulation results to ${output_folder}/realistic_scenario" | tee -a $LOG_FILE           
cp -r ${result_dir} ${output_folder}/realistic_scenario/


exit 0






# fail when one of the command fails
set +e

